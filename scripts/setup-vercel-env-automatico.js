#!/usr/bin/env node

/**
 * Script para configurar vari√°veis de ambiente no Vercel automaticamente
 * Requer Vercel CLI instalado: npm i -g vercel
 */

const { execSync } = require('child_process');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üöÄ CONFIGURA√á√ÉO AUTOM√ÅTICA DE VARI√ÅVEIS NO VERCEL\n');

async function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function main() {
  try {
    console.log('üìã Vou configurar as vari√°veis de ambiente automaticamente!\n');
    
    // Verificar se Vercel CLI est√° instalado
    try {
      execSync('vercel --version', { stdio: 'ignore' });
      console.log('‚úÖ Vercel CLI encontrado');
    } catch (error) {
      console.log('‚ùå Vercel CLI n√£o encontrado. Instalando...');
      execSync('npm install -g vercel', { stdio: 'inherit' });
      console.log('‚úÖ Vercel CLI instalado');
    }
    
    // Login no Vercel
    console.log('\nüîê Fazendo login no Vercel...');
    execSync('vercel login', { stdio: 'inherit' });
    
    // Link do projeto
    console.log('\nüîó Conectando ao projeto...');
    execSync('vercel link', { stdio: 'inherit' });
    
    // Coletar informa√ß√µes do Supabase
    console.log('\nüìù Agora preciso das informa√ß√µes do Supabase:');
    
    const supabaseUrl = await question('Cole a URL do Supabase (https://xxx.supabase.co): ');
    const anonKey = await question('Cole a ANON KEY (eyJ0eXAi...): ');
    const serviceKey = await question('Cole a SERVICE ROLE KEY (eyJ0eXAi...): ');
    
    console.log('\n‚öôÔ∏è Configurando vari√°veis de ambiente...');
    
    // Configurar vari√°veis
    execSync(`vercel env add NEXT_PUBLIC_SUPABASE_URL production`, {
      input: supabaseUrl,
      stdio: ['pipe', 'inherit', 'inherit']
    });
    
    execSync(`vercel env add NEXT_PUBLIC_SUPABASE_URL preview`, {
      input: supabaseUrl,
      stdio: ['pipe', 'inherit', 'inherit']
    });
    
    execSync(`vercel env add NEXT_PUBLIC_SUPABASE_URL development`, {
      input: supabaseUrl,
      stdio: ['pipe', 'inherit', 'inherit']
    });
    
    execSync(`vercel env add NEXT_PUBLIC_SUPABASE_ANON_KEY production`, {
      input: anonKey,
      stdio: ['pipe', 'inherit', 'inherit']
    });
    
    execSync(`vercel env add NEXT_PUBLIC_SUPABASE_ANON_KEY preview`, {
      input: anonKey,
      stdio: ['pipe', 'inherit', 'inherit']
    });
    
    execSync(`vercel env add NEXT_PUBLIC_SUPABASE_ANON_KEY development`, {
      input: anonKey,
      stdio: ['pipe', 'inherit', 'inherit']
    });
    
    execSync(`vercel env add SUPABASE_SERVICE_ROLE_KEY production`, {
      input: serviceKey,
      stdio: ['pipe', 'inherit', 'inherit']
    });
    
    execSync(`vercel env add SUPABASE_SERVICE_ROLE_KEY preview`, {
      input: serviceKey,
      stdio: ['pipe', 'inherit', 'inherit']
    });
    
    execSync(`vercel env add SUPABASE_SERVICE_ROLE_KEY development`, {
      input: serviceKey,
      stdio: ['pipe', 'inherit', 'inherit']
    });
    
    console.log('\nüöÄ Fazendo redeploy...');
    execSync('vercel --prod', { stdio: 'inherit' });
    
    console.log('\nüéâ SUCESSO! Vari√°veis configuradas e deploy realizado!');
    console.log('\nüìã Pr√≥ximos passos:');
    console.log('1. Execute as migrations no Supabase');
    console.log('2. Crie os usu√°rios de teste');
    console.log('3. Teste o sistema na URL gerada');
    
  } catch (error) {
    console.error('\n‚ùå Erro:', error.message);
    console.log('\nüîß Solu√ß√£o manual:');
    console.log('1. Acesse vercel.com');
    console.log('2. V√° em Settings ‚Üí Environment Variables');
    console.log('3. Configure as 3 vari√°veis manualmente');
  } finally {
    rl.close();
  }
}

main();